/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['src/Workflow.js']) {
  _$jscoverage['src/Workflow.js'] = [];
  _$jscoverage['src/Workflow.js'][7] = 0;
  _$jscoverage['src/Workflow.js'][9] = 0;
  _$jscoverage['src/Workflow.js'][10] = 0;
  _$jscoverage['src/Workflow.js'][11] = 0;
  _$jscoverage['src/Workflow.js'][12] = 0;
  _$jscoverage['src/Workflow.js'][14] = 0;
  _$jscoverage['src/Workflow.js'][15] = 0;
  _$jscoverage['src/Workflow.js'][16] = 0;
  _$jscoverage['src/Workflow.js'][17] = 0;
  _$jscoverage['src/Workflow.js'][18] = 0;
  _$jscoverage['src/Workflow.js'][20] = 0;
  _$jscoverage['src/Workflow.js'][21] = 0;
  _$jscoverage['src/Workflow.js'][22] = 0;
  _$jscoverage['src/Workflow.js'][24] = 0;
  _$jscoverage['src/Workflow.js'][26] = 0;
  _$jscoverage['src/Workflow.js'][27] = 0;
  _$jscoverage['src/Workflow.js'][28] = 0;
  _$jscoverage['src/Workflow.js'][30] = 0;
  _$jscoverage['src/Workflow.js'][31] = 0;
  _$jscoverage['src/Workflow.js'][33] = 0;
  _$jscoverage['src/Workflow.js'][35] = 0;
  _$jscoverage['src/Workflow.js'][43] = 0;
  _$jscoverage['src/Workflow.js'][44] = 0;
  _$jscoverage['src/Workflow.js'][45] = 0;
  _$jscoverage['src/Workflow.js'][52] = 0;
  _$jscoverage['src/Workflow.js'][60] = 0;
  _$jscoverage['src/Workflow.js'][61] = 0;
  _$jscoverage['src/Workflow.js'][63] = 0;
  _$jscoverage['src/Workflow.js'][71] = 0;
  _$jscoverage['src/Workflow.js'][72] = 0;
  _$jscoverage['src/Workflow.js'][74] = 0;
}
_$jscoverage['src/Workflow.js'].source = ["","<span class=\"c\">/**</span>","<span class=\"c\"> * Das Objekt Workflow stellt ein Singleton dar,</span>","<span class=\"c\"> * das Methoden zum Finden und Erstellen von Tasks (Tasklanes) bereitstellt.</span>","<span class=\"c\"> * Es speichert das Task Repository.</span>","<span class=\"c\"> */</span>","WoSec<span class=\"k\">.</span>workflow <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"c\">// Singleton pattern begin</span>","    <span class=\"c\">// import</span>","\t<span class=\"k\">var</span> newTask <span class=\"k\">=</span> WoSec<span class=\"k\">.</span>newTask<span class=\"k\">;</span>","\t<span class=\"k\">var</span> newTaskLane <span class=\"k\">=</span> WoSec<span class=\"k\">.</span>newTaskLane<span class=\"k\">;</span>","\t<span class=\"k\">var</span> htmlRenderer <span class=\"k\">=</span> WoSec<span class=\"k\">.</span>htmlRenderer<span class=\"k\">;</span>","\t<span class=\"k\">var</span> svgUtility <span class=\"k\">=</span> WoSec<span class=\"k\">.</span>svgUtility<span class=\"k\">;</span>","\t","\t<span class=\"k\">var</span> thisInstanceID<span class=\"k\">;</span>","    <span class=\"k\">var</span> taskRepository <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span> <span class=\"c\">// ID =&gt; Task</span>","    <span class=\"k\">var</span> taskLaneRepository <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span> <span class=\"c\">// ID =&gt; TaskLane</span>","\t<span class=\"k\">var</span> correspondingActivities <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span> <span class=\"c\">// ID =&gt; ID</span>","\t<span class=\"k\">var</span> activitiesInALane <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span> <span class=\"c\">// TaskLaneID =&gt; [TaskIDs]</span>","\t","    <span class=\"k\">function</span> createTask<span class=\"k\">(</span>activityID<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>activityID<span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"s\">\"string\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">throw</span> <span class=\"k\">new</span> TypeError<span class=\"k\">(</span><span class=\"s\">\"The given ID is not a String\"</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","        <span class=\"k\">return</span> newTask<span class=\"k\">(</span>htmlRenderer<span class=\"k\">.</span>createInfobox<span class=\"k\">(),</span> svgUtility<span class=\"k\">.</span>getTaskRectangle<span class=\"k\">(</span>activityID<span class=\"k\">),</span> correspondingActivities<span class=\"k\">[</span>activityID<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">function</span> createTaskLane<span class=\"k\">(</span>activityGroupID<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>activityGroupID<span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"s\">\"string\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">throw</span> <span class=\"k\">new</span> TypeError<span class=\"k\">(</span><span class=\"s\">\"The given groupID is not a String\"</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(!</span>activitiesInALane<span class=\"k\">[</span>activityGroupID<span class=\"k\">])</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"Unknown activityGroupID\"</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","        <span class=\"k\">return</span> newTaskLane<span class=\"k\">(</span>svgUtility<span class=\"k\">.</span>getTaskLaneRectangle<span class=\"k\">(</span>activityGroupID<span class=\"k\">),</span> activitiesInALane<span class=\"k\">[</span>activityGroupID<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">/**</span>","<span class=\"c\">\t\t * Initialisiert den Workflow mit den korrespondierenden Tasks und Tasks in einer TaskLane</span>","<span class=\"c\">\t\t * @param {String} InstanzID</span>","<span class=\"c\">\t\t * @param {Object} correspondingActivitiesIDs korrespondierende Tasks ID =&gt; ID</span>","<span class=\"c\">\t\t * @param {Object} activityIDsForALane Tasks in einer TaskLane TaskLaneID =&gt; [TaskIDs]</span>","<span class=\"c\">\t\t */</span>","\t\tinit<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>instanceID<span class=\"k\">,</span> correspondingActivitiesIDs<span class=\"k\">,</span> activityIDsForALane<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tthisInstanceID <span class=\"k\">=</span> instanceID<span class=\"k\">;</span>","\t\t\tcorrespondingActivities <span class=\"k\">=</span> correspondingActivitiesIDs<span class=\"k\">;</span>","\t\t\tactivitiesInALane <span class=\"k\">=</span> activityIDsForALane<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"c\">/**</span>","<span class=\"c\">\t\t * Gibt die InstanzID des Workflows zur&#195;&#188;ck</span>","<span class=\"c\">\t\t * @return InstanzID</span>","<span class=\"c\">\t\t */</span>","\t\tgetInstanceID<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span> thisInstanceID<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"c\">/**</span>","<span class=\"c\">\t\t * Liefert den Task mit der angegebenen ID zur&#195;&#188;ck</span>","<span class=\"c\">\t\t * @param {String} activityID</span>","<span class=\"c\">\t\t * @return {Task} Task ggf. aus Repository</span>","<span class=\"c\">\t\t */</span>","        getTaskByID<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>activityID<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(!</span>taskRepository<span class=\"k\">[</span>activityID<span class=\"k\">])</span> <span class=\"k\">{</span>","\t\t\t\ttaskRepository<span class=\"k\">[</span>activityID<span class=\"k\">]</span> <span class=\"k\">=</span> createTask<span class=\"k\">(</span>activityID<span class=\"k\">)</span>","\t\t\t<span class=\"k\">}</span>","            <span class=\"k\">return</span> taskRepository<span class=\"k\">[</span>activityID<span class=\"k\">];</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"c\">/**</span>","<span class=\"c\">\t\t * Liefert die Lane mit der angegebenen ID zur&#195;&#188;ck</span>","<span class=\"c\">\t\t * @param {String} activityGroupID</span>","<span class=\"c\">\t\t * @return {TaskLane} TaskLane ggf. aus Repository</span>","<span class=\"c\">\t\t */</span>","        getTaskLaneByID<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>activityGroupID<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(!</span>taskLaneRepository<span class=\"k\">[</span>activityGroupID<span class=\"k\">])</span> <span class=\"k\">{</span>","\t\t\t\ttaskLaneRepository<span class=\"k\">[</span>activityGroupID<span class=\"k\">]</span> <span class=\"k\">=</span> createTaskLane<span class=\"k\">(</span>activityGroupID<span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","            <span class=\"k\">return</span> taskLaneRepository<span class=\"k\">[</span>activityGroupID<span class=\"k\">];</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">());</span> <span class=\"c\">// Singleton pattern end</span>"];
_$jscoverage['src/Workflow.js'][7]++;
WoSec.workflow = (function () {
  _$jscoverage['src/Workflow.js'][9]++;
  var newTask = WoSec.newTask;
  _$jscoverage['src/Workflow.js'][10]++;
  var newTaskLane = WoSec.newTaskLane;
  _$jscoverage['src/Workflow.js'][11]++;
  var htmlRenderer = WoSec.htmlRenderer;
  _$jscoverage['src/Workflow.js'][12]++;
  var svgUtility = WoSec.svgUtility;
  _$jscoverage['src/Workflow.js'][14]++;
  var thisInstanceID;
  _$jscoverage['src/Workflow.js'][15]++;
  var taskRepository = {};
  _$jscoverage['src/Workflow.js'][16]++;
  var taskLaneRepository = {};
  _$jscoverage['src/Workflow.js'][17]++;
  var correspondingActivities = {};
  _$jscoverage['src/Workflow.js'][18]++;
  var activitiesInALane = {};
  _$jscoverage['src/Workflow.js'][20]++;
  function createTask(activityID) {
    _$jscoverage['src/Workflow.js'][21]++;
    if (((typeof activityID) != "string")) {
      _$jscoverage['src/Workflow.js'][22]++;
      throw new TypeError("The given ID is not a String");
    }
    _$jscoverage['src/Workflow.js'][24]++;
    return newTask(htmlRenderer.createInfobox(), svgUtility.getTaskRectangle(activityID), correspondingActivities[activityID]);
}
  _$jscoverage['src/Workflow.js'][26]++;
  function createTaskLane(activityGroupID) {
    _$jscoverage['src/Workflow.js'][27]++;
    if (((typeof activityGroupID) != "string")) {
      _$jscoverage['src/Workflow.js'][28]++;
      throw new TypeError("The given groupID is not a String");
    }
    _$jscoverage['src/Workflow.js'][30]++;
    if ((! activitiesInALane[activityGroupID])) {
      _$jscoverage['src/Workflow.js'][31]++;
      throw new Error("Unknown activityGroupID");
    }
    _$jscoverage['src/Workflow.js'][33]++;
    return newTaskLane(svgUtility.getTaskLaneRectangle(activityGroupID), activitiesInALane[activityGroupID]);
}
  _$jscoverage['src/Workflow.js'][35]++;
  return ({init: (function (instanceID, correspondingActivitiesIDs, activityIDsForALane) {
  _$jscoverage['src/Workflow.js'][43]++;
  thisInstanceID = instanceID;
  _$jscoverage['src/Workflow.js'][44]++;
  correspondingActivities = correspondingActivitiesIDs;
  _$jscoverage['src/Workflow.js'][45]++;
  activitiesInALane = activityIDsForALane;
}), getInstanceID: (function () {
  _$jscoverage['src/Workflow.js'][52]++;
  return thisInstanceID;
}), getTaskByID: (function (activityID) {
  _$jscoverage['src/Workflow.js'][60]++;
  if ((! taskRepository[activityID])) {
    _$jscoverage['src/Workflow.js'][61]++;
    taskRepository[activityID] = createTask(activityID);
  }
  _$jscoverage['src/Workflow.js'][63]++;
  return taskRepository[activityID];
}), getTaskLaneByID: (function (activityGroupID) {
  _$jscoverage['src/Workflow.js'][71]++;
  if ((! taskLaneRepository[activityGroupID])) {
    _$jscoverage['src/Workflow.js'][72]++;
    taskLaneRepository[activityGroupID] = createTaskLane(activityGroupID);
  }
  _$jscoverage['src/Workflow.js'][74]++;
  return taskLaneRepository[activityGroupID];
})});
})();
