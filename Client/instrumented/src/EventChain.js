/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['src/EventChain.js']) {
  _$jscoverage['src/EventChain.js'] = [];
  _$jscoverage['src/EventChain.js'][8] = 0;
  _$jscoverage['src/EventChain.js'][9] = 0;
  _$jscoverage['src/EventChain.js'][10] = 0;
  _$jscoverage['src/EventChain.js'][12] = 0;
  _$jscoverage['src/EventChain.js'][13] = 0;
  _$jscoverage['src/EventChain.js'][14] = 0;
  _$jscoverage['src/EventChain.js'][16] = 0;
  _$jscoverage['src/EventChain.js'][23] = 0;
  _$jscoverage['src/EventChain.js'][24] = 0;
  _$jscoverage['src/EventChain.js'][26] = 0;
  _$jscoverage['src/EventChain.js'][27] = 0;
  _$jscoverage['src/EventChain.js'][34] = 0;
  _$jscoverage['src/EventChain.js'][43] = 0;
  _$jscoverage['src/EventChain.js'][44] = 0;
  _$jscoverage['src/EventChain.js'][45] = 0;
  _$jscoverage['src/EventChain.js'][46] = 0;
  _$jscoverage['src/EventChain.js'][48] = 0;
  _$jscoverage['src/EventChain.js'][50] = 0;
  _$jscoverage['src/EventChain.js'][51] = 0;
  _$jscoverage['src/EventChain.js'][53] = 0;
  _$jscoverage['src/EventChain.js'][65] = 0;
  _$jscoverage['src/EventChain.js'][66] = 0;
  _$jscoverage['src/EventChain.js'][67] = 0;
  _$jscoverage['src/EventChain.js'][68] = 0;
  _$jscoverage['src/EventChain.js'][69] = 0;
  _$jscoverage['src/EventChain.js'][70] = 0;
  _$jscoverage['src/EventChain.js'][72] = 0;
  _$jscoverage['src/EventChain.js'][73] = 0;
  _$jscoverage['src/EventChain.js'][75] = 0;
  _$jscoverage['src/EventChain.js'][77] = 0;
  _$jscoverage['src/EventChain.js'][90] = 0;
  _$jscoverage['src/EventChain.js'][91] = 0;
  _$jscoverage['src/EventChain.js'][92] = 0;
  _$jscoverage['src/EventChain.js'][94] = 0;
  _$jscoverage['src/EventChain.js'][96] = 0;
  _$jscoverage['src/EventChain.js'][97] = 0;
  _$jscoverage['src/EventChain.js'][106] = 0;
  _$jscoverage['src/EventChain.js'][107] = 0;
  _$jscoverage['src/EventChain.js'][109] = 0;
}
_$jscoverage['src/EventChain.js'].source = ["","","<span class=\"c\">/**</span>","<span class=\"c\"> * Singleton zur Verwaltung einer Liste von EventCommands</span>","<span class=\"c\"> * und eines Zeigers zur momentanen (zeitlichen) Position der Events</span>","<span class=\"c\"> * @type EventChain</span>","<span class=\"c\"> */</span>","WoSec<span class=\"k\">.</span>eventChain <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> PLAY_TIME_BETWEEN_EVENTS_MS <span class=\"k\">=</span> <span class=\"s\">750</span><span class=\"k\">;</span>","\t<span class=\"k\">var</span> EventCommand <span class=\"k\">=</span> WoSec<span class=\"k\">.</span>EventCommand<span class=\"k\">;</span>","    ","\t<span class=\"k\">var</span> events <span class=\"k\">=</span> <span class=\"k\">[];</span>","\t<span class=\"k\">var</span> currentPosition <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","\t<span class=\"k\">var</span> observers <span class=\"k\">=</span> <span class=\"k\">[];</span>","","    <span class=\"k\">return</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">/**</span>","<span class=\"c\">\t\t * Registriert einen Beobachter</span>","<span class=\"c\">\t\t * @param {Object} observer</span>","<span class=\"c\">\t\t * @return {EventChain} self</span>","<span class=\"c\">\t\t */</span>","\t\tregisterObserver<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>observer<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> observer<span class=\"k\">.</span>notify <span class=\"k\">!==</span> <span class=\"s\">\"function\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"Observer has to support notify()-Method\"</span><span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","\t\t\tobservers<span class=\"k\">.</span>push<span class=\"k\">(</span>observer<span class=\"k\">);</span>","\t\t\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"c\">/**</span>","<span class=\"c\">\t\t * Gibt die momentane Position in der EventChain zur&#195;&#188;ck</span>","<span class=\"c\">\t\t * @return {Integer} momentane Position</span>","<span class=\"c\">\t\t */</span>","\t\tgetCurrentPosition<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span> currentPosition<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"c\">/**</span>","<span class=\"c\">\t\t * Verarbeitet JSON Daten, erstellt neue EventCommands und f&#195;&#188;gt sie dem Repository hinzu.</span>","<span class=\"c\">\t\t * @memberOf EventChain</span>","<span class=\"c\">\t\t * @param {Array} data JSON daten</span>","<span class=\"c\">\t\t * @return {EventChain} self</span>","<span class=\"c\">\t\t */</span>","        add<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tdata <span class=\"k\">=</span> data <span class=\"k\">||</span> <span class=\"k\">[];</span>","            data<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>event<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(!</span>EventCommand<span class=\"k\">[</span>event<span class=\"k\">.</span>eventCommand<span class=\"k\">])</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"Unknown EventCommand: \"</span> <span class=\"k\">+</span> event<span class=\"k\">.</span>eventCommand<span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\tevents<span class=\"k\">.</span>push<span class=\"k\">(</span>EventCommand<span class=\"k\">[</span>event<span class=\"k\">.</span>eventCommand<span class=\"k\">].</span>create<span class=\"k\">(</span>event<span class=\"k\">));</span> <span class=\"c\">// factory method</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\tobservers<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>observer<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tobserver<span class=\"k\">.</span>notify<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"c\">/**</span>","<span class=\"c\">\t\t * Iteriert &#195;&#188;ber Events und &#195;&#188;bergibt das jeweilige EventCommand an die &#195;&#188;bergebene Strategie.</span>","<span class=\"c\">\t\t * H&#195;&#164;lt an wenn die Strategie false zur&#195;&#188;ckgibt</span>","<span class=\"c\">\t\t * Informiert die Beobachter</span>","<span class=\"c\">\t\t * @memberOf EventChain</span>","<span class=\"c\">\t\t * @param {Function} strategy Strategie zur Iteration</span>","<span class=\"c\">\t\t * @param {Boolean} [backwards] true um die Kette r&#195;&#188;ckw&#195;&#164;rts zu durchlaufen</span>","<span class=\"c\">\t\t * @return {EventChain} self</span>","<span class=\"c\">\t\t */</span>","        seek<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>strategy<span class=\"k\">,</span> backwards<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> direction <span class=\"k\">=</span> backwards <span class=\"k\">?</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">var</span> i <span class=\"k\">=</span> currentPosition<span class=\"k\">;</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span><span class=\"s\">0</span> <span class=\"k\">&lt;=</span> i <span class=\"k\">&amp;&amp;</span> i <span class=\"k\">&lt;</span> events<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tcurrentPosition <span class=\"k\">=</span> i<span class=\"k\">;</span>","\t\t\t\tobservers<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>observer<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tobserver<span class=\"k\">.</span>notify<span class=\"k\">();</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>strategy<span class=\"k\">(</span>events<span class=\"k\">[</span>i<span class=\"k\">],</span> i<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">false</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">break</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\ti <span class=\"k\">+=</span> direction","\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"c\">/**</span>","<span class=\"c\">\t\t * Iteriert &#195;&#188;ber alle Events</span>","<span class=\"c\">\t\t * @see Array.prototype.forEach</span>","<span class=\"c\">\t\t */</span>","\t\tforEach<span class=\"k\">:</span> events<span class=\"k\">.</span>forEach<span class=\"k\">.</span>bind<span class=\"k\">(</span>events<span class=\"k\">),</span>","\t\t<span class=\"c\">/**</span>","<span class=\"c\">\t\t * Iteriert &#195;&#188;ber Events in einer angenehmen Geschwindigkeit und f&#195;&#188;hrt die EventCommands aus.</span>","<span class=\"c\">\t\t * @memberOf EventChain</span>","<span class=\"c\">\t\t * @return {EventChain} self</span>","<span class=\"c\">\t\t */</span>","        play<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">var</span> after <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>seek<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>eventCommand<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\teventCommand<span class=\"k\">.</span>later<span class=\"k\">(</span>after<span class=\"k\">,</span> <span class=\"s\">\"execute\"</span><span class=\"k\">)</span>","\t\t\t\t            <span class=\"k\">.</span>later<span class=\"k\">(</span>after<span class=\"k\">,</span> <span class=\"s\">\"animate\"</span><span class=\"k\">);</span>","\t\t\t\tafter <span class=\"k\">+=</span> PLAY_TIME_BETWEEN_EVENTS_MS<span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\tcurrentPosition<span class=\"k\">++;</span>","\t\t\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"c\">/**</span>","<span class=\"c\">\t\t * Gibt das letzte EventCommand in der Kette zur&#195;&#188;ck,</span>","<span class=\"c\">\t\t * falls die Kette leer ist, wird ein EventCommand mit Zeitstempel 0 zur&#195;&#188;ckgegeben</span>","<span class=\"c\">\t\t * @memberOf EventChain</span>","<span class=\"c\">\t\t * @return {EventCommand} das letzte EventCommand in der Kette</span>","<span class=\"c\">\t\t */</span>","\t\tlast<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>events<span class=\"k\">[</span>events<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">])</span> <span class=\"k\">{</span> <span class=\"c\">// if last event exists return it</span>","\t\t\t\t<span class=\"k\">return</span> events<span class=\"k\">[</span>events<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">];</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">new</span> EventCommand<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">);</span> <span class=\"c\">// else mock an event with timestamp zero for the ajaxUpdater</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">());</span>"];
_$jscoverage['src/EventChain.js'][8]++;
WoSec.eventChain = (function () {
  _$jscoverage['src/EventChain.js'][9]++;
  var PLAY_TIME_BETWEEN_EVENTS_MS = 750;
  _$jscoverage['src/EventChain.js'][10]++;
  var EventCommand = WoSec.EventCommand;
  _$jscoverage['src/EventChain.js'][12]++;
  var events = [];
  _$jscoverage['src/EventChain.js'][13]++;
  var currentPosition = 0;
  _$jscoverage['src/EventChain.js'][14]++;
  var observers = [];
  _$jscoverage['src/EventChain.js'][16]++;
  return ({registerObserver: (function (observer) {
  _$jscoverage['src/EventChain.js'][23]++;
  if (((typeof observer.notify) !== "function")) {
    _$jscoverage['src/EventChain.js'][24]++;
    throw new Error("Observer has to support notify()-Method");
  }
  _$jscoverage['src/EventChain.js'][26]++;
  observers.push(observer);
  _$jscoverage['src/EventChain.js'][27]++;
  return this;
}), getCurrentPosition: (function () {
  _$jscoverage['src/EventChain.js'][34]++;
  return currentPosition;
}), add: (function (data) {
  _$jscoverage['src/EventChain.js'][43]++;
  data = (data || []);
  _$jscoverage['src/EventChain.js'][44]++;
  data.forEach((function (event) {
  _$jscoverage['src/EventChain.js'][45]++;
  if ((! EventCommand[event.eventCommand])) {
    _$jscoverage['src/EventChain.js'][46]++;
    throw new Error(("Unknown EventCommand: " + event.eventCommand));
  }
  _$jscoverage['src/EventChain.js'][48]++;
  events.push(EventCommand[event.eventCommand].create(event));
}));
  _$jscoverage['src/EventChain.js'][50]++;
  observers.forEach((function (observer) {
  _$jscoverage['src/EventChain.js'][51]++;
  observer.notify();
}));
  _$jscoverage['src/EventChain.js'][53]++;
  return this;
}), seek: (function (strategy, backwards) {
  _$jscoverage['src/EventChain.js'][65]++;
  var direction = (backwards? -1: 1);
  _$jscoverage['src/EventChain.js'][66]++;
  var i = currentPosition;
  _$jscoverage['src/EventChain.js'][67]++;
  while (((0 <= i) && (i < events.length))) {
    _$jscoverage['src/EventChain.js'][68]++;
    currentPosition = i;
    _$jscoverage['src/EventChain.js'][69]++;
    observers.forEach((function (observer) {
  _$jscoverage['src/EventChain.js'][70]++;
  observer.notify();
}));
    _$jscoverage['src/EventChain.js'][72]++;
    if ((strategy(events[i], i) === false)) {
      _$jscoverage['src/EventChain.js'][73]++;
      break;
    }
    _$jscoverage['src/EventChain.js'][75]++;
    i += direction;
}
  _$jscoverage['src/EventChain.js'][77]++;
  return this;
}), forEach: events.forEach.bind(events), play: (function () {
  _$jscoverage['src/EventChain.js'][90]++;
  var after = 0;
  _$jscoverage['src/EventChain.js'][91]++;
  return this.seek((function (eventCommand) {
  _$jscoverage['src/EventChain.js'][92]++;
  eventCommand.later(after, "execute").later(after, "animate");
  _$jscoverage['src/EventChain.js'][94]++;
  after += PLAY_TIME_BETWEEN_EVENTS_MS;
}));
  _$jscoverage['src/EventChain.js'][96]++;
  (currentPosition++);
  _$jscoverage['src/EventChain.js'][97]++;
  return this;
}), last: (function () {
  _$jscoverage['src/EventChain.js'][106]++;
  if (events[(events.length - 1)]) {
    _$jscoverage['src/EventChain.js'][107]++;
    return events[(events.length - 1)];
  }
  else {
    _$jscoverage['src/EventChain.js'][109]++;
    return new EventCommand(0);
  }
})});
})();
