/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['src/EventCommands.js']) {
  _$jscoverage['src/EventCommands.js'] = [];
  _$jscoverage['src/EventCommands.js'][2] = 0;
  _$jscoverage['src/EventCommands.js'][4] = 0;
  _$jscoverage['src/EventCommands.js'][13] = 0;
  _$jscoverage['src/EventCommands.js'][14] = 0;
  _$jscoverage['src/EventCommands.js'][15] = 0;
  _$jscoverage['src/EventCommands.js'][17] = 0;
  _$jscoverage['src/EventCommands.js'][19] = 0;
  _$jscoverage['src/EventCommands.js'][24] = 0;
  _$jscoverage['src/EventCommands.js'][25] = 0;
  _$jscoverage['src/EventCommands.js'][31] = 0;
  _$jscoverage['src/EventCommands.js'][32] = 0;
  _$jscoverage['src/EventCommands.js'][37] = 0;
  _$jscoverage['src/EventCommands.js'][38] = 0;
  _$jscoverage['src/EventCommands.js'][44] = 0;
  _$jscoverage['src/EventCommands.js'][45] = 0;
  _$jscoverage['src/EventCommands.js'][47] = 0;
  _$jscoverage['src/EventCommands.js'][48] = 0;
  _$jscoverage['src/EventCommands.js'][60] = 0;
  _$jscoverage['src/EventCommands.js'][61] = 0;
  _$jscoverage['src/EventCommands.js'][70] = 0;
  _$jscoverage['src/EventCommands.js'][71] = 0;
  _$jscoverage['src/EventCommands.js'][72] = 0;
  _$jscoverage['src/EventCommands.js'][74] = 0;
  _$jscoverage['src/EventCommands.js'][78] = 0;
  _$jscoverage['src/EventCommands.js'][79] = 0;
  _$jscoverage['src/EventCommands.js'][80] = 0;
  _$jscoverage['src/EventCommands.js'][81] = 0;
  _$jscoverage['src/EventCommands.js'][83] = 0;
  _$jscoverage['src/EventCommands.js'][84] = 0;
  _$jscoverage['src/EventCommands.js'][85] = 0;
  _$jscoverage['src/EventCommands.js'][86] = 0;
  _$jscoverage['src/EventCommands.js'][91] = 0;
  _$jscoverage['src/EventCommands.js'][92] = 0;
  _$jscoverage['src/EventCommands.js'][93] = 0;
  _$jscoverage['src/EventCommands.js'][94] = 0;
  _$jscoverage['src/EventCommands.js'][102] = 0;
  _$jscoverage['src/EventCommands.js'][103] = 0;
  _$jscoverage['src/EventCommands.js'][114] = 0;
  _$jscoverage['src/EventCommands.js'][115] = 0;
  _$jscoverage['src/EventCommands.js'][116] = 0;
  _$jscoverage['src/EventCommands.js'][117] = 0;
  _$jscoverage['src/EventCommands.js'][119] = 0;
  _$jscoverage['src/EventCommands.js'][123] = 0;
  _$jscoverage['src/EventCommands.js'][124] = 0;
  _$jscoverage['src/EventCommands.js'][125] = 0;
  _$jscoverage['src/EventCommands.js'][126] = 0;
  _$jscoverage['src/EventCommands.js'][127] = 0;
  _$jscoverage['src/EventCommands.js'][128] = 0;
  _$jscoverage['src/EventCommands.js'][130] = 0;
  _$jscoverage['src/EventCommands.js'][131] = 0;
  _$jscoverage['src/EventCommands.js'][132] = 0;
  _$jscoverage['src/EventCommands.js'][133] = 0;
  _$jscoverage['src/EventCommands.js'][144] = 0;
  _$jscoverage['src/EventCommands.js'][145] = 0;
  _$jscoverage['src/EventCommands.js'][156] = 0;
  _$jscoverage['src/EventCommands.js'][157] = 0;
  _$jscoverage['src/EventCommands.js'][158] = 0;
  _$jscoverage['src/EventCommands.js'][159] = 0;
  _$jscoverage['src/EventCommands.js'][161] = 0;
  _$jscoverage['src/EventCommands.js'][165] = 0;
  _$jscoverage['src/EventCommands.js'][166] = 0;
  _$jscoverage['src/EventCommands.js'][167] = 0;
  _$jscoverage['src/EventCommands.js'][173] = 0;
  _$jscoverage['src/EventCommands.js'][174] = 0;
  _$jscoverage['src/EventCommands.js'][175] = 0;
  _$jscoverage['src/EventCommands.js'][185] = 0;
  _$jscoverage['src/EventCommands.js'][186] = 0;
  _$jscoverage['src/EventCommands.js'][197] = 0;
  _$jscoverage['src/EventCommands.js'][198] = 0;
  _$jscoverage['src/EventCommands.js'][199] = 0;
  _$jscoverage['src/EventCommands.js'][200] = 0;
  _$jscoverage['src/EventCommands.js'][202] = 0;
  _$jscoverage['src/EventCommands.js'][206] = 0;
  _$jscoverage['src/EventCommands.js'][207] = 0;
  _$jscoverage['src/EventCommands.js'][208] = 0;
  _$jscoverage['src/EventCommands.js'][214] = 0;
  _$jscoverage['src/EventCommands.js'][215] = 0;
  _$jscoverage['src/EventCommands.js'][216] = 0;
  _$jscoverage['src/EventCommands.js'][226] = 0;
  _$jscoverage['src/EventCommands.js'][227] = 0;
  _$jscoverage['src/EventCommands.js'][231] = 0;
  _$jscoverage['src/EventCommands.js'][232] = 0;
  _$jscoverage['src/EventCommands.js'][233] = 0;
  _$jscoverage['src/EventCommands.js'][234] = 0;
  _$jscoverage['src/EventCommands.js'][235] = 0;
  _$jscoverage['src/EventCommands.js'][236] = 0;
  _$jscoverage['src/EventCommands.js'][238] = 0;
}
_$jscoverage['src/EventCommands.js'].source = ["","<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","","<span class=\"k\">var</span> workflow <span class=\"k\">=</span> WoSec<span class=\"k\">.</span>workflow<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Basisklasse f&#195;&#188;r Events unterschiedlichen Typs, bietet Ausf&#195;&#188;hren- und Animiere-Methoden.</span>","<span class=\"c\"> * Speichert einen zugeh&#195;&#182;rigen Zeitstempel.</span>","<span class=\"c\"> * Entwurfsmuster Befehl (Command)</span>","<span class=\"c\"> * Namespace f&#195;&#188;r alle EventCommands</span>","<span class=\"c\"> * @param {Integer} timestamp Zeitstempel</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> EventCommand<span class=\"k\">(</span>timestamp<span class=\"k\">)</span> <span class=\"k\">{</span><span class=\"c\">// interface (and abstract class)</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>timestamp<span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"s\">\"number\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"Timestamp [\"</span> <span class=\"k\">+</span> timestamp <span class=\"k\">+</span> <span class=\"s\">\"] is not a number\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>timestamp <span class=\"k\">=</span> timestamp<span class=\"k\">;</span>","<span class=\"k\">}</span> ","EventCommand<span class=\"k\">.</span>prototype <span class=\"k\">=</span> Object<span class=\"k\">.</span>create<span class=\"k\">(</span>WoSec<span class=\"k\">.</span>baseObject<span class=\"k\">);</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * F&#195;&#188;hrt den Befehl aus.</span>","<span class=\"c\"> * @return {EventCommand}</span>","<span class=\"c\"> */</span>","EventCommand<span class=\"k\">.</span>prototype<span class=\"k\">.</span>execute <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * F&#195;&#188;hrt die Animation des Befehls aus.</span>","<span class=\"c\"> * @return {EventCommand}</span>","<span class=\"c\"> */</span>","EventCommand<span class=\"k\">.</span>prototype<span class=\"k\">.</span>animate <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * Macht den Befehl r&#195;&#188;ckg&#195;&#164;ngig</span>","<span class=\"c\"> */</span>","EventCommand<span class=\"k\">.</span>prototype<span class=\"k\">.</span>unwind <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * Gibt den Zeitstempel des Events zur&#195;&#188;ck</span>","<span class=\"c\"> * @return {Integer}</span>","<span class=\"c\"> */</span>","EventCommand<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getTimestamp <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>timestamp<span class=\"k\">;</span>","<span class=\"k\">}</span>","EventCommand<span class=\"k\">.</span>create <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>event<span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">return</span> <span class=\"k\">new</span> EventCommand<span class=\"k\">(</span>event<span class=\"k\">.</span>timestamp<span class=\"k\">);</span>","<span class=\"k\">}</span>","","","<span class=\"c\">// wei&#195;&#159; nicht so recht hier... gibt verschiedene M&#195;&#182;glichkeiten das umzusetzen. Ich denke mal das der klassische Ansatz der einfachste ist...</span>","<span class=\"c\">// WoSec.inherit erm&#195;&#182;glicht jedenfalls die Nutzung des instanceof Operators</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Abstrakte Klasse. Abstrahiert HighlightingEvent und MarkFinishedEvent,</span>","<span class=\"c\"> * die beide eine Status&#195;&#164;nderung eines Tasks darstellen.</span>","<span class=\"c\"> * @augments EventCommand</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> StateChangingEvent<span class=\"k\">()</span> <span class=\"k\">{}</span>","WoSec<span class=\"k\">.</span>inherit<span class=\"k\">(</span>StateChangingEvent<span class=\"k\">,</span> EventCommand<span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Beim Starten einer Aktivit&#195;&#164;t delegiert dieses Objekt die Anweisung,</span>","<span class=\"c\"> * sich hervorzuheben, an den zugeh&#195;&#182;rigen Task.</span>","<span class=\"c\"> * @augments StateChangingEvent</span>","<span class=\"c\"> * @param {Task} task Zugeh&#195;&#182;riger Task</span>","<span class=\"c\"> * @param {Integer} timestamp Zeitstempel</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> HighlightingEvent<span class=\"k\">(</span>task<span class=\"k\">,</span> timestamp<span class=\"k\">)</span> <span class=\"k\">{</span>","\tEventCommand<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> timestamp<span class=\"k\">);</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>task <span class=\"k\">=</span> task<span class=\"k\">;</span>","<span class=\"k\">}</span>","WoSec<span class=\"k\">.</span>inherit<span class=\"k\">(</span>HighlightingEvent<span class=\"k\">,</span> StateChangingEvent<span class=\"k\">);</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * @see EventCommand.execute</span>","<span class=\"c\"> */</span>","HighlightingEvent<span class=\"k\">.</span>prototype<span class=\"k\">.</span>execute <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>task<span class=\"k\">.</span>markActive<span class=\"k\">();</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>task<span class=\"k\">.</span>getCorrespondingTask<span class=\"k\">()</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>task<span class=\"k\">.</span>getCorrespondingTask<span class=\"k\">().</span>markActive<span class=\"k\">();</span>","\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","HighlightingEvent<span class=\"k\">.</span>prototype<span class=\"k\">.</span>unwind <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>task<span class=\"k\">.</span>reset<span class=\"k\">();</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>task<span class=\"k\">.</span>getCorrespondingTask<span class=\"k\">()</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>task<span class=\"k\">.</span>getCorrespondingTask<span class=\"k\">().</span>reset<span class=\"k\">();</span>","\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * @see EventCommand.animate</span>","<span class=\"c\"> */</span>","HighlightingEvent<span class=\"k\">.</span>prototype<span class=\"k\">.</span>animate <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>task<span class=\"k\">.</span>highlight<span class=\"k\">();</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>task<span class=\"k\">.</span>getCorrespondingTask<span class=\"k\">()</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>task<span class=\"k\">.</span>getCorrespondingTask<span class=\"k\">().</span>highlight<span class=\"k\">();</span>","\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * Factory Methode zur Erstellung eines HighlightingEvent</span>","<span class=\"c\"> * @param {Object} event Eventdaten</span>","<span class=\"c\"> * @param {String} event.activityID Aktivit&#195;&#164;ts ID</span>","<span class=\"c\"> * @param {Integer} event.timestamp Zeitstempel</span>","<span class=\"c\"> */</span>","HighlightingEvent<span class=\"k\">.</span>create <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>event<span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">return</span> <span class=\"k\">new</span> HighlightingEvent<span class=\"k\">(</span>workflow<span class=\"k\">.</span>getTaskByID<span class=\"k\">(</span>event<span class=\"k\">.</span>activityID<span class=\"k\">),</span> event<span class=\"k\">.</span>timestamp<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Beim Beenden einer Aktivit&#195;&#164;t delegiert dieses Objekt die Anweisung an den zugeh&#195;&#182;rigen Task,</span>","<span class=\"c\"> *  sich als beendet zu markieren.</span>","<span class=\"c\"> * @augments StateChangingEvent</span>","<span class=\"c\"> * @param {Task} task Zugeh&#195;&#182;riger Task</span>","<span class=\"c\"> * @param {Object} information Zus&#195;&#164;tzliche Eventinformationen</span>","<span class=\"c\"> * @param {Integer} timestamp Zeitstempel</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> MarkFinishedEvent<span class=\"k\">(</span>task<span class=\"k\">,</span> information<span class=\"k\">,</span> timestamp<span class=\"k\">)</span> <span class=\"k\">{</span>","\tEventCommand<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> timestamp<span class=\"k\">);</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>task <span class=\"k\">=</span> task<span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>information <span class=\"k\">=</span> information <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","WoSec<span class=\"k\">.</span>inherit<span class=\"k\">(</span>MarkFinishedEvent<span class=\"k\">,</span> StateChangingEvent<span class=\"k\">);</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * @see EventCommand.execute</span>","<span class=\"c\"> */</span>","MarkFinishedEvent<span class=\"k\">.</span>prototype<span class=\"k\">.</span>execute <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>task<span class=\"k\">.</span>markFinished<span class=\"k\">();</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>task<span class=\"k\">.</span>getCorrespondingTask<span class=\"k\">()</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>task<span class=\"k\">.</span>getCorrespondingTask<span class=\"k\">().</span>markFinished<span class=\"k\">();</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>task<span class=\"k\">.</span>setInformation<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>information<span class=\"k\">);</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>task<span class=\"k\">.</span>getCorrespondingTask<span class=\"k\">()</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>task<span class=\"k\">.</span>getCorrespondingTask<span class=\"k\">().</span>setInformation<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>information<span class=\"k\">);</span>","\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","MarkFinishedEvent<span class=\"k\">.</span>prototype<span class=\"k\">.</span>unwind <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>task<span class=\"k\">.</span>markActive<span class=\"k\">();</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>task<span class=\"k\">.</span>getCorrespondingTask<span class=\"k\">()</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>task<span class=\"k\">.</span>getCorrespondingTask<span class=\"k\">().</span>markActive<span class=\"k\">();</span>","\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","<span class=\"c\">//MarkFinishedEvent.prototype.animate = function() {}; // NOP</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * Factory Methode zur Erstellung eines MarkFinishedEvent</span>","<span class=\"c\"> * @param {Object} event Eventdaten</span>","<span class=\"c\"> * @param {String} event.activityID Aktivit&#195;&#164;ts ID</span>","<span class=\"c\"> * @param {Integer} event.timestamp Zeitstempel</span>","<span class=\"c\"> * @param {Object} event.information zus&#195;&#164;tzliche Eventinformationen</span>","<span class=\"c\"> * </span>","<span class=\"c\"> */</span>","MarkFinishedEvent<span class=\"k\">.</span>create <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>event<span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">return</span> <span class=\"k\">new</span> MarkFinishedEvent<span class=\"k\">(</span>workflow<span class=\"k\">.</span>getTaskByID<span class=\"k\">(</span>event<span class=\"k\">.</span>activityID<span class=\"k\">),</span> event<span class=\"k\">.</span>information<span class=\"k\">,</span> event<span class=\"k\">.</span>timestamp<span class=\"k\">);</span>","<span class=\"k\">}</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Bei einem Datentransfer delegiert dieses Objekt die Anweisung an den zugeh&#195;&#182;rigen Task,</span>","<span class=\"c\"> * eine Animation zum korrespondierenden Task darzustellen.</span>","<span class=\"c\"> * @param {Task} task Zugeh&#195;&#182;riger Task</span>","<span class=\"c\"> * @param {Object} information Zus&#195;&#164;tzliche Eventinformationen</span>","<span class=\"c\"> * @param {Integer} timestamp Zeitstempel</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> TransferingDataEvent<span class=\"k\">(</span>task<span class=\"k\">,</span> information<span class=\"k\">,</span> timestamp<span class=\"k\">)</span> <span class=\"k\">{</span>","\tEventCommand<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> timestamp<span class=\"k\">);</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>task <span class=\"k\">=</span> task<span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>information <span class=\"k\">=</span> information <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","WoSec<span class=\"k\">.</span>inherit<span class=\"k\">(</span>TransferingDataEvent<span class=\"k\">,</span> EventCommand<span class=\"k\">);</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * @see EventCommand.execute</span>","<span class=\"c\"> */</span>","TransferingDataEvent<span class=\"k\">.</span>prototype<span class=\"k\">.</span>execute <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>task<span class=\"k\">.</span>setInformation<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>information<span class=\"k\">);</span>","\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"c\">// TransferingDataEvent.prototype.unwind = function() {} // NOP</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * @see EventCommand.animate</span>","<span class=\"c\"> */</span>","TransferingDataEvent<span class=\"k\">.</span>prototype<span class=\"k\">.</span>animate <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>task<span class=\"k\">.</span>animateData<span class=\"k\">();</span>","\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * Factory Methode zur Erstellung eines TransferingDataEvent</span>","<span class=\"c\"> * @param {Object} event Eventdaten</span>","<span class=\"c\"> * @param {String} event.activityID Aktivit&#195;&#164;ts ID</span>","<span class=\"c\"> * @param {Integer} event.timestamp Zeitstempel</span>","<span class=\"c\"> * @param {Object} event.information zus&#195;&#164;tzliche Eventinformationen</span>","<span class=\"c\"> * </span>","<span class=\"c\"> */</span>","TransferingDataEvent<span class=\"k\">.</span>create <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>event<span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">return</span> <span class=\"k\">new</span> TransferingDataEvent<span class=\"k\">(</span>workflow<span class=\"k\">.</span>getTaskByID<span class=\"k\">(</span>event<span class=\"k\">.</span>activityID<span class=\"k\">),</span> event<span class=\"k\">.</span>information<span class=\"k\">,</span> event<span class=\"k\">.</span>timestamp<span class=\"k\">);</span>","<span class=\"k\">}</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Bei der Festlegung des zugewiesenen Users bzw. Providers delegiert dieses Objekt die Anweisung,</span>","<span class=\"c\"> * sich hervorzuheben und den Participant festzulegen, an die zugeh&#195;&#182;rige TaskLane sich hervorzuheben.</span>","<span class=\"c\"> * @param {TaskLane} taskLane Zugeh&#195;&#182;rige TaskLane</span>","<span class=\"c\"> * @param {Object} information Zus&#195;&#164;tzliche Eventinformationen</span>","<span class=\"c\"> * @param {Integer} timestamp Zeitstempel</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> SpecifyingParticipantEvent<span class=\"k\">(</span>taskLane<span class=\"k\">,</span> information<span class=\"k\">,</span> timestamp<span class=\"k\">)</span> <span class=\"k\">{</span>","\tEventCommand<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> timestamp<span class=\"k\">);</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>taskLane <span class=\"k\">=</span> taskLane<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>information <span class=\"k\">=</span> information <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","WoSec<span class=\"k\">.</span>inherit<span class=\"k\">(</span>SpecifyingParticipantEvent<span class=\"k\">,</span> EventCommand<span class=\"k\">);</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * @see EventCommand.execute</span>","<span class=\"c\"> */</span>","SpecifyingParticipantEvent<span class=\"k\">.</span>prototype<span class=\"k\">.</span>execute <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>taskLane<span class=\"k\">.</span>setInformation<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>information<span class=\"k\">);</span>","\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"c\">// SpecifyingParticipantEvent.prototype.unwind = function() {} // NOP</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * @see EventCommand.animate</span>","<span class=\"c\"> */</span>","SpecifyingParticipantEvent<span class=\"k\">.</span>prototype<span class=\"k\">.</span>animate <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>taskLane<span class=\"k\">.</span>highlight<span class=\"k\">();</span>","\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * Factory Methode zur Erstellung eines SpecifyingParticipantEvent</span>","<span class=\"c\"> * @param {Object} event Eventdaten</span>","<span class=\"c\"> * @param {String} event.activityGroupID Aktivit&#195;&#164;tsGruppen ID</span>","<span class=\"c\"> * @param {Integer} event.timestamp Zeitstempel</span>","<span class=\"c\"> * @param {Object} event.information zus&#195;&#164;tzliche Eventinformationen</span>","<span class=\"c\"> * @param {Object} event.information.participant ausgew&#195;&#164;hlter Provider oder User</span>","<span class=\"c\"> */</span>","SpecifyingParticipantEvent<span class=\"k\">.</span>create <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>event<span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">return</span> <span class=\"k\">new</span> SpecifyingParticipantEvent<span class=\"k\">(</span>workflow<span class=\"k\">.</span>getTaskLaneByID<span class=\"k\">(</span>event<span class=\"k\">.</span>activityGroupID<span class=\"k\">),</span> event<span class=\"k\">.</span>information<span class=\"k\">,</span> event<span class=\"k\">.</span>timestamp<span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">// exports</span>","EventCommand<span class=\"k\">.</span>EventCommand <span class=\"k\">=</span> EventCommand<span class=\"k\">;</span>","EventCommand<span class=\"k\">.</span>StateChanging <span class=\"k\">=</span> StateChangingEvent<span class=\"k\">;</span>","EventCommand<span class=\"k\">.</span>Highlighting <span class=\"k\">=</span> HighlightingEvent<span class=\"k\">;</span>","EventCommand<span class=\"k\">.</span>MarkFinished <span class=\"k\">=</span> MarkFinishedEvent<span class=\"k\">;</span>","EventCommand<span class=\"k\">.</span>TransferingData <span class=\"k\">=</span> TransferingDataEvent<span class=\"k\">;</span>","EventCommand<span class=\"k\">.</span>SpecifyingParticipant <span class=\"k\">=</span> SpecifyingParticipantEvent<span class=\"k\">;</span>","","WoSec<span class=\"k\">.</span>EventCommand <span class=\"k\">=</span> EventCommand<span class=\"k\">;</span>","","<span class=\"k\">}</span><span class=\"k\">());</span>"];
_$jscoverage['src/EventCommands.js'][2]++;
(function () {
  _$jscoverage['src/EventCommands.js'][4]++;
  var workflow = WoSec.workflow;
  _$jscoverage['src/EventCommands.js'][13]++;
  function EventCommand(timestamp) {
    _$jscoverage['src/EventCommands.js'][14]++;
    if (((typeof timestamp) != "number")) {
      _$jscoverage['src/EventCommands.js'][15]++;
      throw new Error(("Timestamp [" + timestamp + "] is not a number"));
    }
    _$jscoverage['src/EventCommands.js'][17]++;
    this.timestamp = timestamp;
}
  _$jscoverage['src/EventCommands.js'][19]++;
  EventCommand.prototype = Object.create(WoSec.baseObject);
  _$jscoverage['src/EventCommands.js'][24]++;
  EventCommand.prototype.execute = (function () {
  _$jscoverage['src/EventCommands.js'][25]++;
  return this;
});
  _$jscoverage['src/EventCommands.js'][31]++;
  EventCommand.prototype.animate = (function () {
  _$jscoverage['src/EventCommands.js'][32]++;
  return this;
});
  _$jscoverage['src/EventCommands.js'][37]++;
  EventCommand.prototype.unwind = (function () {
  _$jscoverage['src/EventCommands.js'][38]++;
  return this;
});
  _$jscoverage['src/EventCommands.js'][44]++;
  EventCommand.prototype.getTimestamp = (function () {
  _$jscoverage['src/EventCommands.js'][45]++;
  return this.timestamp;
});
  _$jscoverage['src/EventCommands.js'][47]++;
  EventCommand.create = (function (event) {
  _$jscoverage['src/EventCommands.js'][48]++;
  return new EventCommand(event.timestamp);
});
  _$jscoverage['src/EventCommands.js'][60]++;
  function StateChangingEvent() {
}
  _$jscoverage['src/EventCommands.js'][61]++;
  WoSec.inherit(StateChangingEvent, EventCommand);
  _$jscoverage['src/EventCommands.js'][70]++;
  function HighlightingEvent(task, timestamp) {
    _$jscoverage['src/EventCommands.js'][71]++;
    EventCommand.call(this, timestamp);
    _$jscoverage['src/EventCommands.js'][72]++;
    this.task = task;
}
  _$jscoverage['src/EventCommands.js'][74]++;
  WoSec.inherit(HighlightingEvent, StateChangingEvent);
  _$jscoverage['src/EventCommands.js'][78]++;
  HighlightingEvent.prototype.execute = (function () {
  _$jscoverage['src/EventCommands.js'][79]++;
  this.task.markActive();
  _$jscoverage['src/EventCommands.js'][80]++;
  (this.task.getCorrespondingTask() && this.task.getCorrespondingTask().markActive());
  _$jscoverage['src/EventCommands.js'][81]++;
  return this;
});
  _$jscoverage['src/EventCommands.js'][83]++;
  HighlightingEvent.prototype.unwind = (function () {
  _$jscoverage['src/EventCommands.js'][84]++;
  this.task.reset();
  _$jscoverage['src/EventCommands.js'][85]++;
  (this.task.getCorrespondingTask() && this.task.getCorrespondingTask().reset());
  _$jscoverage['src/EventCommands.js'][86]++;
  return this;
});
  _$jscoverage['src/EventCommands.js'][91]++;
  HighlightingEvent.prototype.animate = (function () {
  _$jscoverage['src/EventCommands.js'][92]++;
  this.task.highlight();
  _$jscoverage['src/EventCommands.js'][93]++;
  (this.task.getCorrespondingTask() && this.task.getCorrespondingTask().highlight());
  _$jscoverage['src/EventCommands.js'][94]++;
  return this;
});
  _$jscoverage['src/EventCommands.js'][102]++;
  HighlightingEvent.create = (function (event) {
  _$jscoverage['src/EventCommands.js'][103]++;
  return new HighlightingEvent(workflow.getTaskByID(event.activityID), event.timestamp);
});
  _$jscoverage['src/EventCommands.js'][114]++;
  function MarkFinishedEvent(task, information, timestamp) {
    _$jscoverage['src/EventCommands.js'][115]++;
    EventCommand.call(this, timestamp);
    _$jscoverage['src/EventCommands.js'][116]++;
    this.task = task;
    _$jscoverage['src/EventCommands.js'][117]++;
    this.information = (information || {});
}
  _$jscoverage['src/EventCommands.js'][119]++;
  WoSec.inherit(MarkFinishedEvent, StateChangingEvent);
  _$jscoverage['src/EventCommands.js'][123]++;
  MarkFinishedEvent.prototype.execute = (function () {
  _$jscoverage['src/EventCommands.js'][124]++;
  this.task.markFinished();
  _$jscoverage['src/EventCommands.js'][125]++;
  (this.task.getCorrespondingTask() && this.task.getCorrespondingTask().markFinished());
  _$jscoverage['src/EventCommands.js'][126]++;
  this.task.setInformation(this.information);
  _$jscoverage['src/EventCommands.js'][127]++;
  (this.task.getCorrespondingTask() && this.task.getCorrespondingTask().setInformation(this.information));
  _$jscoverage['src/EventCommands.js'][128]++;
  return this;
});
  _$jscoverage['src/EventCommands.js'][130]++;
  MarkFinishedEvent.prototype.unwind = (function () {
  _$jscoverage['src/EventCommands.js'][131]++;
  this.task.markActive();
  _$jscoverage['src/EventCommands.js'][132]++;
  (this.task.getCorrespondingTask() && this.task.getCorrespondingTask().markActive());
  _$jscoverage['src/EventCommands.js'][133]++;
  return this;
});
  _$jscoverage['src/EventCommands.js'][144]++;
  MarkFinishedEvent.create = (function (event) {
  _$jscoverage['src/EventCommands.js'][145]++;
  return new MarkFinishedEvent(workflow.getTaskByID(event.activityID), event.information, event.timestamp);
});
  _$jscoverage['src/EventCommands.js'][156]++;
  function TransferingDataEvent(task, information, timestamp) {
    _$jscoverage['src/EventCommands.js'][157]++;
    EventCommand.call(this, timestamp);
    _$jscoverage['src/EventCommands.js'][158]++;
    this.task = task;
    _$jscoverage['src/EventCommands.js'][159]++;
    this.information = (information || {});
}
  _$jscoverage['src/EventCommands.js'][161]++;
  WoSec.inherit(TransferingDataEvent, EventCommand);
  _$jscoverage['src/EventCommands.js'][165]++;
  TransferingDataEvent.prototype.execute = (function () {
  _$jscoverage['src/EventCommands.js'][166]++;
  this.task.setInformation(this.information);
  _$jscoverage['src/EventCommands.js'][167]++;
  return this;
});
  _$jscoverage['src/EventCommands.js'][173]++;
  TransferingDataEvent.prototype.animate = (function () {
  _$jscoverage['src/EventCommands.js'][174]++;
  this.task.animateData();
  _$jscoverage['src/EventCommands.js'][175]++;
  return this;
});
  _$jscoverage['src/EventCommands.js'][185]++;
  TransferingDataEvent.create = (function (event) {
  _$jscoverage['src/EventCommands.js'][186]++;
  return new TransferingDataEvent(workflow.getTaskByID(event.activityID), event.information, event.timestamp);
});
  _$jscoverage['src/EventCommands.js'][197]++;
  function SpecifyingParticipantEvent(taskLane, information, timestamp) {
    _$jscoverage['src/EventCommands.js'][198]++;
    EventCommand.call(this, timestamp);
    _$jscoverage['src/EventCommands.js'][199]++;
    this.taskLane = taskLane;
    _$jscoverage['src/EventCommands.js'][200]++;
    this.information = (information || {});
}
  _$jscoverage['src/EventCommands.js'][202]++;
  WoSec.inherit(SpecifyingParticipantEvent, EventCommand);
  _$jscoverage['src/EventCommands.js'][206]++;
  SpecifyingParticipantEvent.prototype.execute = (function () {
  _$jscoverage['src/EventCommands.js'][207]++;
  this.taskLane.setInformation(this.information);
  _$jscoverage['src/EventCommands.js'][208]++;
  return this;
});
  _$jscoverage['src/EventCommands.js'][214]++;
  SpecifyingParticipantEvent.prototype.animate = (function () {
  _$jscoverage['src/EventCommands.js'][215]++;
  this.taskLane.highlight();
  _$jscoverage['src/EventCommands.js'][216]++;
  return this;
});
  _$jscoverage['src/EventCommands.js'][226]++;
  SpecifyingParticipantEvent.create = (function (event) {
  _$jscoverage['src/EventCommands.js'][227]++;
  return new SpecifyingParticipantEvent(workflow.getTaskLaneByID(event.activityGroupID), event.information, event.timestamp);
});
  _$jscoverage['src/EventCommands.js'][231]++;
  EventCommand.EventCommand = EventCommand;
  _$jscoverage['src/EventCommands.js'][232]++;
  EventCommand.StateChanging = StateChangingEvent;
  _$jscoverage['src/EventCommands.js'][233]++;
  EventCommand.Highlighting = HighlightingEvent;
  _$jscoverage['src/EventCommands.js'][234]++;
  EventCommand.MarkFinished = MarkFinishedEvent;
  _$jscoverage['src/EventCommands.js'][235]++;
  EventCommand.TransferingData = TransferingDataEvent;
  _$jscoverage['src/EventCommands.js'][236]++;
  EventCommand.SpecifyingParticipant = SpecifyingParticipantEvent;
  _$jscoverage['src/EventCommands.js'][238]++;
  WoSec.EventCommand = EventCommand;
})();
