/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['spec.EventCommands.js']) {
  _$jscoverage['spec.EventCommands.js'] = [];
  _$jscoverage['spec.EventCommands.js'][2] = 0;
  _$jscoverage['spec.EventCommands.js'][3] = 0;
  _$jscoverage['spec.EventCommands.js'][4] = 0;
  _$jscoverage['spec.EventCommands.js'][5] = 0;
  _$jscoverage['spec.EventCommands.js'][6] = 0;
  _$jscoverage['spec.EventCommands.js'][8] = 0;
  _$jscoverage['spec.EventCommands.js'][9] = 0;
  _$jscoverage['spec.EventCommands.js'][10] = 0;
  _$jscoverage['spec.EventCommands.js'][11] = 0;
  _$jscoverage['spec.EventCommands.js'][12] = 0;
  _$jscoverage['spec.EventCommands.js'][13] = 0;
  _$jscoverage['spec.EventCommands.js'][16] = 0;
  _$jscoverage['spec.EventCommands.js'][17] = 0;
  _$jscoverage['spec.EventCommands.js'][18] = 0;
  _$jscoverage['spec.EventCommands.js'][22] = 0;
  _$jscoverage['spec.EventCommands.js'][23] = 0;
  _$jscoverage['spec.EventCommands.js'][24] = 0;
  _$jscoverage['spec.EventCommands.js'][26] = 0;
  _$jscoverage['spec.EventCommands.js'][27] = 0;
  _$jscoverage['spec.EventCommands.js'][28] = 0;
  _$jscoverage['spec.EventCommands.js'][30] = 0;
  _$jscoverage['spec.EventCommands.js'][31] = 0;
  _$jscoverage['spec.EventCommands.js'][32] = 0;
  _$jscoverage['spec.EventCommands.js'][34] = 0;
  _$jscoverage['spec.EventCommands.js'][35] = 0;
  _$jscoverage['spec.EventCommands.js'][38] = 0;
  _$jscoverage['spec.EventCommands.js'][39] = 0;
  _$jscoverage['spec.EventCommands.js'][40] = 0;
  _$jscoverage['spec.EventCommands.js'][41] = 0;
  _$jscoverage['spec.EventCommands.js'][44] = 0;
  _$jscoverage['spec.EventCommands.js'][45] = 0;
  _$jscoverage['spec.EventCommands.js'][46] = 0;
  _$jscoverage['spec.EventCommands.js'][47] = 0;
  _$jscoverage['spec.EventCommands.js'][50] = 0;
  _$jscoverage['spec.EventCommands.js'][51] = 0;
  _$jscoverage['spec.EventCommands.js'][52] = 0;
  _$jscoverage['spec.EventCommands.js'][53] = 0;
  _$jscoverage['spec.EventCommands.js'][58] = 0;
  _$jscoverage['spec.EventCommands.js'][59] = 0;
  _$jscoverage['spec.EventCommands.js'][60] = 0;
  _$jscoverage['spec.EventCommands.js'][61] = 0;
  _$jscoverage['spec.EventCommands.js'][63] = 0;
  _$jscoverage['spec.EventCommands.js'][64] = 0;
  _$jscoverage['spec.EventCommands.js'][65] = 0;
  _$jscoverage['spec.EventCommands.js'][67] = 0;
  _$jscoverage['spec.EventCommands.js'][68] = 0;
  _$jscoverage['spec.EventCommands.js'][71] = 0;
  _$jscoverage['spec.EventCommands.js'][72] = 0;
  _$jscoverage['spec.EventCommands.js'][73] = 0;
  _$jscoverage['spec.EventCommands.js'][74] = 0;
  _$jscoverage['spec.EventCommands.js'][76] = 0;
  _$jscoverage['spec.EventCommands.js'][77] = 0;
  _$jscoverage['spec.EventCommands.js'][78] = 0;
  _$jscoverage['spec.EventCommands.js'][81] = 0;
  _$jscoverage['spec.EventCommands.js'][82] = 0;
  _$jscoverage['spec.EventCommands.js'][83] = 0;
  _$jscoverage['spec.EventCommands.js'][84] = 0;
  _$jscoverage['spec.EventCommands.js'][89] = 0;
  _$jscoverage['spec.EventCommands.js'][90] = 0;
  _$jscoverage['spec.EventCommands.js'][91] = 0;
  _$jscoverage['spec.EventCommands.js'][92] = 0;
  _$jscoverage['spec.EventCommands.js'][93] = 0;
  _$jscoverage['spec.EventCommands.js'][95] = 0;
  _$jscoverage['spec.EventCommands.js'][96] = 0;
  _$jscoverage['spec.EventCommands.js'][97] = 0;
  _$jscoverage['spec.EventCommands.js'][100] = 0;
  _$jscoverage['spec.EventCommands.js'][101] = 0;
  _$jscoverage['spec.EventCommands.js'][102] = 0;
  _$jscoverage['spec.EventCommands.js'][103] = 0;
  _$jscoverage['spec.EventCommands.js'][106] = 0;
  _$jscoverage['spec.EventCommands.js'][107] = 0;
  _$jscoverage['spec.EventCommands.js'][108] = 0;
  _$jscoverage['spec.EventCommands.js'][109] = 0;
  _$jscoverage['spec.EventCommands.js'][114] = 0;
  _$jscoverage['spec.EventCommands.js'][115] = 0;
  _$jscoverage['spec.EventCommands.js'][116] = 0;
  _$jscoverage['spec.EventCommands.js'][117] = 0;
  _$jscoverage['spec.EventCommands.js'][119] = 0;
  _$jscoverage['spec.EventCommands.js'][120] = 0;
  _$jscoverage['spec.EventCommands.js'][121] = 0;
  _$jscoverage['spec.EventCommands.js'][124] = 0;
  _$jscoverage['spec.EventCommands.js'][125] = 0;
  _$jscoverage['spec.EventCommands.js'][126] = 0;
  _$jscoverage['spec.EventCommands.js'][127] = 0;
  _$jscoverage['spec.EventCommands.js'][130] = 0;
  _$jscoverage['spec.EventCommands.js'][131] = 0;
  _$jscoverage['spec.EventCommands.js'][132] = 0;
  _$jscoverage['spec.EventCommands.js'][133] = 0;
  _$jscoverage['spec.EventCommands.js'][138] = 0;
}
_$jscoverage['spec.EventCommands.js'].source = ["","EventCommand <span class=\"k\">=</span> WoSec<span class=\"k\">.</span>EventCommand<span class=\"k\">;</span>","newTask <span class=\"k\">=</span> WoSec<span class=\"k\">.</span>newTask<span class=\"k\">;</span>","newTaskLane <span class=\"k\">=</span> WoSec<span class=\"k\">.</span>newTaskLane<span class=\"k\">;</span>","svgUtility <span class=\"k\">=</span> WoSec<span class=\"k\">.</span>svgUtility<span class=\"k\">;</span>","htmlRenderer <span class=\"k\">=</span> WoSec<span class=\"k\">.</span>htmlRenderer<span class=\"k\">;</span>","","describe<span class=\"k\">(</span><span class=\"s\">\"EventCommands\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\tdescribe<span class=\"k\">(</span><span class=\"s\">\"EventCommand abstract class\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\tdescribe<span class=\"k\">(</span><span class=\"s\">\"method getTimestamp\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\tit<span class=\"k\">(</span><span class=\"s\">\"should return a stored timestamp\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\tanEventCommand <span class=\"k\">=</span> <span class=\"k\">new</span> EventCommand<span class=\"k\">(</span><span class=\"s\">123456789</span><span class=\"k\">);</span>","\t\t\t\texpect<span class=\"k\">(</span>anEventCommand<span class=\"k\">.</span>getTimestamp<span class=\"k\">()).</span>to<span class=\"k\">(</span>be<span class=\"k\">,</span> <span class=\"s\">123456789</span><span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\tdescribe<span class=\"k\">(</span><span class=\"s\">\"static method create\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\tit<span class=\"k\">(</span><span class=\"s\">\"should return a new EventCommand\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\texpect<span class=\"k\">(</span>EventCommand<span class=\"k\">.</span>create<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">)).</span>to<span class=\"k\">(</span>be_an_instance_of<span class=\"k\">,</span> EventCommand<span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\tbefore_each<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\ttask <span class=\"k\">=</span> newTask<span class=\"k\">(</span>htmlRenderer<span class=\"k\">.</span>createInfobox<span class=\"k\">(),</span> svgUtility<span class=\"k\">.</span>getTaskRectangle<span class=\"k\">(</span><span class=\"s\">\"someID\"</span><span class=\"k\">))</span>","\t\tstub<span class=\"k\">(</span>WoSec<span class=\"k\">.</span>workflow<span class=\"k\">,</span> <span class=\"s\">\"getTaskByID\"</span><span class=\"k\">).</span>and_return<span class=\"k\">(</span>task<span class=\"k\">)</span>","\t<span class=\"k\">}</span><span class=\"k\">)</span>","\tdescribe<span class=\"k\">(</span><span class=\"s\">\"HighlightingEvent\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\tbefore_each<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\taHighlightingEvent <span class=\"k\">=</span> <span class=\"k\">new</span> EventCommand<span class=\"k\">.</span>Highlighting<span class=\"k\">(</span>task<span class=\"k\">,</span> <span class=\"s\">123456789</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\tdescribe<span class=\"k\">(</span><span class=\"s\">\"inheritance\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\tit<span class=\"k\">(</span><span class=\"s\">\"should inherit from EventCommand\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\texpect<span class=\"k\">(</span>aHighlightingEvent<span class=\"k\">).</span>to<span class=\"k\">(</span>be_an_instance_of<span class=\"k\">,</span> EventCommand<span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\tit<span class=\"k\">(</span><span class=\"s\">\"should inherit from StateChangingEvent\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\texpect<span class=\"k\">(</span>aHighlightingEvent<span class=\"k\">).</span>to<span class=\"k\">(</span>be_an_instance_of<span class=\"k\">,</span> EventCommand<span class=\"k\">.</span>StateChanging<span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\tdescribe<span class=\"k\">(</span><span class=\"s\">\"method execute\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\tit<span class=\"k\">(</span><span class=\"s\">\"should tell it's task to markActive\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\texpect<span class=\"k\">(</span>task<span class=\"k\">).</span>to<span class=\"k\">(</span>receive<span class=\"k\">,</span> <span class=\"s\">'markActive'</span><span class=\"k\">,</span> <span class=\"s\">\"twice\"</span><span class=\"k\">);</span>","\t\t\t\taHighlightingEvent<span class=\"k\">.</span>execute<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\tdescribe<span class=\"k\">(</span><span class=\"s\">\"method unwind\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\tit<span class=\"k\">(</span><span class=\"s\">\"should tell it's task to reset\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\texpect<span class=\"k\">(</span>task<span class=\"k\">).</span>to<span class=\"k\">(</span>receive<span class=\"k\">,</span> <span class=\"s\">'reset'</span><span class=\"k\">,</span> <span class=\"s\">\"twice\"</span><span class=\"k\">);</span>","\t\t\t\taHighlightingEvent<span class=\"k\">.</span>unwind<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\tdescribe<span class=\"k\">(</span><span class=\"s\">\"method animate\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\tit<span class=\"k\">(</span><span class=\"s\">\"should tell it's task to highlight\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\texpect<span class=\"k\">(</span>task<span class=\"k\">).</span>to<span class=\"k\">(</span>receive<span class=\"k\">,</span> <span class=\"s\">'highlight'</span><span class=\"k\">);</span>","\t\t\t\taHighlightingEvent<span class=\"k\">.</span>animate<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\tdescribe<span class=\"k\">(</span><span class=\"s\">\"MarkFinishedEvent\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\tbefore_each<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\ttask <span class=\"k\">=</span> newTask<span class=\"k\">(</span>htmlRenderer<span class=\"k\">.</span>createInfobox<span class=\"k\">(),</span> svgUtility<span class=\"k\">.</span>getTaskRectangle<span class=\"k\">(</span><span class=\"s\">\"someID\"</span><span class=\"k\">));</span>","\t\t\taMarkFinishedEvent <span class=\"k\">=</span> <span class=\"k\">new</span> EventCommand<span class=\"k\">.</span>MarkFinished<span class=\"k\">(</span>task<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"s\">123456789</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\tdescribe<span class=\"k\">(</span><span class=\"s\">\"inheritance\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\tit<span class=\"k\">(</span><span class=\"s\">\"should inherit from EventCommand\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\texpect<span class=\"k\">(</span>aMarkFinishedEvent<span class=\"k\">).</span>to<span class=\"k\">(</span>be_an_instance_of<span class=\"k\">,</span> EventCommand<span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\tit<span class=\"k\">(</span><span class=\"s\">\"should inherit from StateChangingEvent\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\texpect<span class=\"k\">(</span>aMarkFinishedEvent<span class=\"k\">).</span>to<span class=\"k\">(</span>be_an_instance_of<span class=\"k\">,</span> EventCommand<span class=\"k\">.</span>StateChanging<span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\tdescribe<span class=\"k\">(</span><span class=\"s\">\"method execute\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\tit<span class=\"k\">(</span><span class=\"s\">\"should tell it's task to markFinished\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\texpect<span class=\"k\">(</span>task<span class=\"k\">).</span>to<span class=\"k\">(</span>receive<span class=\"k\">,</span> <span class=\"s\">'markFinished'</span><span class=\"k\">);</span>","\t\t\t\taMarkFinishedEvent<span class=\"k\">.</span>execute<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\tit<span class=\"k\">(</span><span class=\"s\">\"should setInformation on it's task\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\texpect<span class=\"k\">(</span>task<span class=\"k\">).</span>to<span class=\"k\">(</span>receive<span class=\"k\">,</span> <span class=\"s\">'setInformation'</span><span class=\"k\">);</span>","\t\t\t\taMarkFinishedEvent<span class=\"k\">.</span>execute<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">)</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\tdescribe<span class=\"k\">(</span><span class=\"s\">\"method unwind\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\tit<span class=\"k\">(</span><span class=\"s\">\"should tell it's task to markActive\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\texpect<span class=\"k\">(</span>task<span class=\"k\">).</span>to<span class=\"k\">(</span>receive<span class=\"k\">,</span> <span class=\"s\">'markActive'</span><span class=\"k\">);</span>","\t\t\t\taMarkFinishedEvent<span class=\"k\">.</span>unwind<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\tdescribe<span class=\"k\">(</span><span class=\"s\">\"TransferingDataEvent\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\tbefore_each<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\ttask <span class=\"k\">=</span> newTask<span class=\"k\">(</span>htmlRenderer<span class=\"k\">.</span>createInfobox<span class=\"k\">(),</span> svgUtility<span class=\"k\">.</span>getTaskRectangle<span class=\"k\">(</span><span class=\"s\">\"someID\"</span><span class=\"k\">));</span>","\t\t\tstub<span class=\"k\">(</span>task<span class=\"k\">,</span> <span class=\"s\">'animateData'</span><span class=\"k\">);</span> <span class=\"c\">// would throw a TypeError, because workflow is not initialized</span>","\t\t\taTransferingDataEvent <span class=\"k\">=</span> <span class=\"k\">new</span> EventCommand<span class=\"k\">.</span>TransferingData<span class=\"k\">(</span>task<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"s\">123456789</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\tdescribe<span class=\"k\">(</span><span class=\"s\">\"inheritance\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\tit<span class=\"k\">(</span><span class=\"s\">\"should inherit from EventCommand\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\texpect<span class=\"k\">(</span>aTransferingDataEvent<span class=\"k\">).</span>to<span class=\"k\">(</span>be_an_instance_of<span class=\"k\">,</span> EventCommand<span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\tdescribe<span class=\"k\">(</span><span class=\"s\">\"method execute\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\tit<span class=\"k\">(</span><span class=\"s\">\"should setInformation on it's task\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\texpect<span class=\"k\">(</span>task<span class=\"k\">).</span>to<span class=\"k\">(</span>receive<span class=\"k\">,</span> <span class=\"s\">'setInformation'</span><span class=\"k\">);</span>","\t\t\t\taTransferingDataEvent<span class=\"k\">.</span>execute<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">)</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\tdescribe<span class=\"k\">(</span><span class=\"s\">\"method animate\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\tit<span class=\"k\">(</span><span class=\"s\">\"should animateData on it's task\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\texpect<span class=\"k\">(</span>task<span class=\"k\">).</span>to<span class=\"k\">(</span>receive<span class=\"k\">,</span> <span class=\"s\">'animateData'</span><span class=\"k\">);</span>","\t\t\t\taTransferingDataEvent<span class=\"k\">.</span>animate<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\tdescribe<span class=\"k\">(</span><span class=\"s\">\"SpecifyingParticipantEvent\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\tbefore_each<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\ttaskLane <span class=\"k\">=</span> newTaskLane<span class=\"k\">(</span>svgUtility<span class=\"k\">.</span>getTaskRectangle<span class=\"k\">(</span><span class=\"s\">\"someID\"</span><span class=\"k\">),</span> <span class=\"k\">[]);</span>","\t\t\taSpecifyingParticipantEvent <span class=\"k\">=</span> <span class=\"k\">new</span> EventCommand<span class=\"k\">.</span>SpecifyingParticipant<span class=\"k\">(</span>taskLane<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"s\">123456789</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\tdescribe<span class=\"k\">(</span><span class=\"s\">\"inheritance\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\tit<span class=\"k\">(</span><span class=\"s\">\"should inherit from EventCommand\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\texpect<span class=\"k\">(</span>aSpecifyingParticipantEvent<span class=\"k\">).</span>to<span class=\"k\">(</span>be_an_instance_of<span class=\"k\">,</span> EventCommand<span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\tdescribe<span class=\"k\">(</span><span class=\"s\">\"method execute\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\tit<span class=\"k\">(</span><span class=\"s\">\"should setInformation on it's taskLane\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\texpect<span class=\"k\">(</span>taskLane<span class=\"k\">).</span>to<span class=\"k\">(</span>receive<span class=\"k\">,</span> <span class=\"s\">'setInformation'</span><span class=\"k\">);</span>","\t\t\t\taSpecifyingParticipantEvent<span class=\"k\">.</span>execute<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">)</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\tdescribe<span class=\"k\">(</span><span class=\"s\">\"method animate\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\tit<span class=\"k\">(</span><span class=\"s\">\"should tell it's taskLane to highlight\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\texpect<span class=\"k\">(</span>taskLane<span class=\"k\">).</span>to<span class=\"k\">(</span>receive<span class=\"k\">,</span> <span class=\"s\">'highlight'</span><span class=\"k\">);</span>","\t\t\t\taSpecifyingParticipantEvent<span class=\"k\">.</span>animate<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\tdescribe<span class=\"k\">(</span><span class=\"s\">\"\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t","\t<span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['spec.EventCommands.js'][2]++;
EventCommand = WoSec.EventCommand;
_$jscoverage['spec.EventCommands.js'][3]++;
newTask = WoSec.newTask;
_$jscoverage['spec.EventCommands.js'][4]++;
newTaskLane = WoSec.newTaskLane;
_$jscoverage['spec.EventCommands.js'][5]++;
svgUtility = WoSec.svgUtility;
_$jscoverage['spec.EventCommands.js'][6]++;
htmlRenderer = WoSec.htmlRenderer;
_$jscoverage['spec.EventCommands.js'][8]++;
describe("EventCommands", (function () {
  _$jscoverage['spec.EventCommands.js'][9]++;
  describe("EventCommand abstract class", (function () {
  _$jscoverage['spec.EventCommands.js'][10]++;
  describe("method getTimestamp", (function () {
  _$jscoverage['spec.EventCommands.js'][11]++;
  it("should return a stored timestamp", (function () {
  _$jscoverage['spec.EventCommands.js'][12]++;
  anEventCommand = new EventCommand(123456789);
  _$jscoverage['spec.EventCommands.js'][13]++;
  expect(anEventCommand.getTimestamp()).to(be, 123456789);
}));
}));
  _$jscoverage['spec.EventCommands.js'][16]++;
  describe("static method create", (function () {
  _$jscoverage['spec.EventCommands.js'][17]++;
  it("should return a new EventCommand", (function () {
  _$jscoverage['spec.EventCommands.js'][18]++;
  expect(EventCommand.create({})).to(be_an_instance_of, EventCommand);
}));
}));
}));
  _$jscoverage['spec.EventCommands.js'][22]++;
  before_each((function () {
  _$jscoverage['spec.EventCommands.js'][23]++;
  task = newTask(htmlRenderer.createInfobox(), svgUtility.getTaskRectangle("someID"));
  _$jscoverage['spec.EventCommands.js'][24]++;
  stub(WoSec.workflow, "getTaskByID").and_return(task);
}));
  _$jscoverage['spec.EventCommands.js'][26]++;
  describe("HighlightingEvent", (function () {
  _$jscoverage['spec.EventCommands.js'][27]++;
  before_each((function () {
  _$jscoverage['spec.EventCommands.js'][28]++;
  aHighlightingEvent = new (EventCommand.Highlighting)(task, 123456789);
}));
  _$jscoverage['spec.EventCommands.js'][30]++;
  describe("inheritance", (function () {
  _$jscoverage['spec.EventCommands.js'][31]++;
  it("should inherit from EventCommand", (function () {
  _$jscoverage['spec.EventCommands.js'][32]++;
  expect(aHighlightingEvent).to(be_an_instance_of, EventCommand);
}));
  _$jscoverage['spec.EventCommands.js'][34]++;
  it("should inherit from StateChangingEvent", (function () {
  _$jscoverage['spec.EventCommands.js'][35]++;
  expect(aHighlightingEvent).to(be_an_instance_of, EventCommand.StateChanging);
}));
}));
  _$jscoverage['spec.EventCommands.js'][38]++;
  describe("method execute", (function () {
  _$jscoverage['spec.EventCommands.js'][39]++;
  it("should tell it's task to markActive", (function () {
  _$jscoverage['spec.EventCommands.js'][40]++;
  expect(task).to(receive, "markActive", "twice");
  _$jscoverage['spec.EventCommands.js'][41]++;
  aHighlightingEvent.execute();
}));
}));
  _$jscoverage['spec.EventCommands.js'][44]++;
  describe("method unwind", (function () {
  _$jscoverage['spec.EventCommands.js'][45]++;
  it("should tell it's task to reset", (function () {
  _$jscoverage['spec.EventCommands.js'][46]++;
  expect(task).to(receive, "reset", "twice");
  _$jscoverage['spec.EventCommands.js'][47]++;
  aHighlightingEvent.unwind();
}));
}));
  _$jscoverage['spec.EventCommands.js'][50]++;
  describe("method animate", (function () {
  _$jscoverage['spec.EventCommands.js'][51]++;
  it("should tell it's task to highlight", (function () {
  _$jscoverage['spec.EventCommands.js'][52]++;
  expect(task).to(receive, "highlight");
  _$jscoverage['spec.EventCommands.js'][53]++;
  aHighlightingEvent.animate();
}));
}));
}));
  _$jscoverage['spec.EventCommands.js'][58]++;
  describe("MarkFinishedEvent", (function () {
  _$jscoverage['spec.EventCommands.js'][59]++;
  before_each((function () {
  _$jscoverage['spec.EventCommands.js'][60]++;
  task = newTask(htmlRenderer.createInfobox(), svgUtility.getTaskRectangle("someID"));
  _$jscoverage['spec.EventCommands.js'][61]++;
  aMarkFinishedEvent = new (EventCommand.MarkFinished)(task, {}, 123456789);
}));
  _$jscoverage['spec.EventCommands.js'][63]++;
  describe("inheritance", (function () {
  _$jscoverage['spec.EventCommands.js'][64]++;
  it("should inherit from EventCommand", (function () {
  _$jscoverage['spec.EventCommands.js'][65]++;
  expect(aMarkFinishedEvent).to(be_an_instance_of, EventCommand);
}));
  _$jscoverage['spec.EventCommands.js'][67]++;
  it("should inherit from StateChangingEvent", (function () {
  _$jscoverage['spec.EventCommands.js'][68]++;
  expect(aMarkFinishedEvent).to(be_an_instance_of, EventCommand.StateChanging);
}));
}));
  _$jscoverage['spec.EventCommands.js'][71]++;
  describe("method execute", (function () {
  _$jscoverage['spec.EventCommands.js'][72]++;
  it("should tell it's task to markFinished", (function () {
  _$jscoverage['spec.EventCommands.js'][73]++;
  expect(task).to(receive, "markFinished");
  _$jscoverage['spec.EventCommands.js'][74]++;
  aMarkFinishedEvent.execute();
}));
  _$jscoverage['spec.EventCommands.js'][76]++;
  it("should setInformation on it's task", (function () {
  _$jscoverage['spec.EventCommands.js'][77]++;
  expect(task).to(receive, "setInformation");
  _$jscoverage['spec.EventCommands.js'][78]++;
  aMarkFinishedEvent.execute();
}));
}));
  _$jscoverage['spec.EventCommands.js'][81]++;
  describe("method unwind", (function () {
  _$jscoverage['spec.EventCommands.js'][82]++;
  it("should tell it's task to markActive", (function () {
  _$jscoverage['spec.EventCommands.js'][83]++;
  expect(task).to(receive, "markActive");
  _$jscoverage['spec.EventCommands.js'][84]++;
  aMarkFinishedEvent.unwind();
}));
}));
}));
  _$jscoverage['spec.EventCommands.js'][89]++;
  describe("TransferingDataEvent", (function () {
  _$jscoverage['spec.EventCommands.js'][90]++;
  before_each((function () {
  _$jscoverage['spec.EventCommands.js'][91]++;
  task = newTask(htmlRenderer.createInfobox(), svgUtility.getTaskRectangle("someID"));
  _$jscoverage['spec.EventCommands.js'][92]++;
  stub(task, "animateData");
  _$jscoverage['spec.EventCommands.js'][93]++;
  aTransferingDataEvent = new (EventCommand.TransferingData)(task, {}, 123456789);
}));
  _$jscoverage['spec.EventCommands.js'][95]++;
  describe("inheritance", (function () {
  _$jscoverage['spec.EventCommands.js'][96]++;
  it("should inherit from EventCommand", (function () {
  _$jscoverage['spec.EventCommands.js'][97]++;
  expect(aTransferingDataEvent).to(be_an_instance_of, EventCommand);
}));
}));
  _$jscoverage['spec.EventCommands.js'][100]++;
  describe("method execute", (function () {
  _$jscoverage['spec.EventCommands.js'][101]++;
  it("should setInformation on it's task", (function () {
  _$jscoverage['spec.EventCommands.js'][102]++;
  expect(task).to(receive, "setInformation");
  _$jscoverage['spec.EventCommands.js'][103]++;
  aTransferingDataEvent.execute();
}));
}));
  _$jscoverage['spec.EventCommands.js'][106]++;
  describe("method animate", (function () {
  _$jscoverage['spec.EventCommands.js'][107]++;
  it("should animateData on it's task", (function () {
  _$jscoverage['spec.EventCommands.js'][108]++;
  expect(task).to(receive, "animateData");
  _$jscoverage['spec.EventCommands.js'][109]++;
  aTransferingDataEvent.animate();
}));
}));
}));
  _$jscoverage['spec.EventCommands.js'][114]++;
  describe("SpecifyingParticipantEvent", (function () {
  _$jscoverage['spec.EventCommands.js'][115]++;
  before_each((function () {
  _$jscoverage['spec.EventCommands.js'][116]++;
  taskLane = newTaskLane(svgUtility.getTaskRectangle("someID"), []);
  _$jscoverage['spec.EventCommands.js'][117]++;
  aSpecifyingParticipantEvent = new (EventCommand.SpecifyingParticipant)(taskLane, {}, 123456789);
}));
  _$jscoverage['spec.EventCommands.js'][119]++;
  describe("inheritance", (function () {
  _$jscoverage['spec.EventCommands.js'][120]++;
  it("should inherit from EventCommand", (function () {
  _$jscoverage['spec.EventCommands.js'][121]++;
  expect(aSpecifyingParticipantEvent).to(be_an_instance_of, EventCommand);
}));
}));
  _$jscoverage['spec.EventCommands.js'][124]++;
  describe("method execute", (function () {
  _$jscoverage['spec.EventCommands.js'][125]++;
  it("should setInformation on it's taskLane", (function () {
  _$jscoverage['spec.EventCommands.js'][126]++;
  expect(taskLane).to(receive, "setInformation");
  _$jscoverage['spec.EventCommands.js'][127]++;
  aSpecifyingParticipantEvent.execute();
}));
}));
  _$jscoverage['spec.EventCommands.js'][130]++;
  describe("method animate", (function () {
  _$jscoverage['spec.EventCommands.js'][131]++;
  it("should tell it's taskLane to highlight", (function () {
  _$jscoverage['spec.EventCommands.js'][132]++;
  expect(taskLane).to(receive, "highlight");
  _$jscoverage['spec.EventCommands.js'][133]++;
  aSpecifyingParticipantEvent.animate();
}));
}));
}));
  _$jscoverage['spec.EventCommands.js'][138]++;
  describe("", (function () {
}));
}));
